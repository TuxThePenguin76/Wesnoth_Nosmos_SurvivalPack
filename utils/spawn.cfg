#textdomain Nosmos_SurvivalPack

# these macros are used to spawn enemies and to notice where enemies are going to appear in the next wave.

# ===== spawn settings =====

#define SP_ANNOUNCE_COLOR
255,255,0#enddef

#define SP_NOTICE_COLOR
191,191,191#enddef

# ===== spawn =====

#define SP_EVENT_CHOICE IF_ENABLED
# by Pentarctagon
[event]
     name=side 1 turn 1
     
     [message]
          speaker=narrator
          image=""
          message=""
          
          [option]
               message= _ "I want to know exactly what is going to spawn and where"}
               image="icons/dress_silk_green.png"
               [command]
                    {VARIABLE choice 1}
                    {IF_ENABLED}
               [/command]
          [/option]
          
          [option]
               message= _ "I only want to know general information about what units will be spawning"
               image="icons/cuirass_muscled.png"
               [command]
                    {VARIABLE choice 0}
               [/command]
          [/option]
     [/message]
[/event]
#enddef

#define _SP_LOC_ADJUST ID X Y
# this is used only in SP_LOC_ADUJST.
{VARIABLE loc_adjust[{ID}].x {X}}
{VARIABLE loc_adjust[{ID}].y {Y}}
#enddef

#define SP_LOC_ADJUST X
# X : X coordinate where enemy spawns
# this has to be used before setting or removing info.
# below is unit spawn order and location.
#   3
# 1   5
#   0
# 2   6
#   4
{VARIABLE given_x {X}}
{VARIABLE_OP given_x modulo 2}
{IF_VAR given_x equals 1 (
[then]
# X is odd
     {_SP_LOC_ADJUST 0 0 0}
     {_SP_LOC_ADJUST 1 -1 -1}
     {_SP_LOC_ADJUST 2 -1 0}
     {_SP_LOC_ADJUST 3 0 -1}
     {_SP_LOC_ADJUST 4 0 1}
     {_SP_LOC_ADJUST 5 1 -1}
     {_SP_LOC_ADJUST 6 1 0}
[/then]
[else]
# X is even
     {_SP_LOC_ADJUST 0 0 0}
     {_SP_LOC_ADJUST 1 -1 0}
     {_SP_LOC_ADJUST 2 -1 1}
     {_SP_LOC_ADJUST 3 0 -1}
     {_SP_LOC_ADJUST 4 0 1}
     {_SP_LOC_ADJUST 5 1 0}
     {_SP_LOC_ADJUST 6 1 1}
[/else]
)}
#enddef

#define SP_WAVE ID ANNOUNCE SPAWNS
{IF_VAR is_wave_set not_equals 1 (
[then]
     {VARIABLE is_wave_set 1}
     {VARIABLE wave 1}
[/then]
)}
{VARIABLE waves[$wave].next_wave {ID}}
{VARIABLE wave {ID}}
{VARIABLE waves[$wave].announce {ANNOUNCE}}

{SPAWNS}
#enddef

#define SP LOC TYPE
{VARIABLE waves[$wave].{LOC}[${LOC}].type {TYPE}}
{VARIABLE_OP {LOC} add 1}
#enddef

#define SP_SET_ANNOUNCE X Y
{MI_SET_LABEL {X} {Y} $waves[$turn_number].announce {SP_ANNOUNCE_COLOR}}
#enddef

#define SP_SET_NOTICE LOC X Y
{FOREACH waves[$waves[$turn_number].next_wave].{LOC} id}
     {MI_SET_LABEL "$({X}+$loc_adjust[$id].x)" "$({Y}+$loc_adjust[$id].y)" $waves[$waves[$turn_number].next_wave].{LOC}[$id].type {SP_NOTICE_COLOR}}
{NEXT id}
#enddef

#define SP_SPAWN ENEMY LOC X Y
{FOREACH waves[$turn_number].{LOC} id}
     {NOTRAIT_UNIT {ENEMY} $waves[$turn_number].{LOC}[$id].type {X} {Y}}
{NEXT id}
#enddef

#define SP_REMOVE_NOTICE LOC X Y
{FOREACH waves[$turn_number].{LOC} id}
     {REMOVE_LABEL "$({X}+$loc_adjust[$id].x)" "$({Y}+$loc_adjust[$id].y)"}
{NEXT id}
#enddef

#define SP_EVENT_ANNOUNCE ANNOUNCE
[event]
     name=new turn
     first_time_only=no
     
     {IF_VAR waves[$turn_number].announce not_equals $empty (
     [then]
          {ANNOUNCE}
     [/then]
     )}
[/event]
#enddef

#define SP_EVENT_SPAWN SPAWN NOTICE
[event]
     name=new turn
     first_time_only=no
     
     {IF_VAR waves[$turn_number].announce not_equals $empty (
     [then]
          {SPAWN}
          
          {IF_VAR choice equals 1 (
          [then]
               {NOTICE}
          [/then]
          )}
     [/then]
     )}
[/event]
#enddef
